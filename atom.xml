<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮生若梦，为欢几何</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-03T01:59:21.405Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kyj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018网络赛（一）1009 Tree and Permutation</title>
    <link href="http://yoursite.com/2018/08/27/2018%E7%BD%91%E7%BB%9C%E8%B5%9B%EF%BC%88%E4%B8%80%EF%BC%891009-Tree-and-Permutation/"/>
    <id>http://yoursite.com/2018/08/27/2018网络赛（一）1009-Tree-and-Permutation/</id>
    <published>2018-08-27T04:37:33.000Z</published>
    <updated>2018-09-03T01:59:21.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1009-Tree-and-Permutation"><a href="#1009-Tree-and-Permutation" class="headerlink" title="1009 Tree and Permutation"></a>1009 Tree and Permutation</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>Problem</strong><br>There are  vertices connected by  edges, each edge has its own length.<br>The set {  } contains a total of  unique permutations, let’s say the<br>-th permutation is  and  is its  -th number.<br>For the -th permutation, it can be a traverse sequence of the tree with  vertices,<br>which means we can go from the  -th vertex to the  -th vertex by the shortest<br>path, then go to the  -th vertex ( also by the shortest path ) , and so on. Finally<br>we’ll reach the  -th vertex, let’s define the total distance of this route as  ,<br>so please calculate the sum of  for all  permutations.</p><p><strong>Input</strong><br>There are 10 test cases at most.<br>The first line of each test case contains one integer  (  ) .<br>For the next  lines, each line contains three integer  ,  and  , which means<br>there is an edge between  -th vertex and  -th of length  (<br>) .</p><p><strong>Output</strong><br>For each test case, print the answer module  in one line.<br>Sample Input<br>3<br>1 2 1<br>2 3 1<br>3<br>1 2 1<br>1 3 2<br>Sample Output<br>16<br>24</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出n个点(1,2,3…..n)，用n-1条边连接，从第i点到第j点的路径取它们之间的最短路径，在某种排列下，从第一个节点到最后一个节点的距离为该排列的距离，求全排列的总距离和。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>1、写几个全排列可以发现：在n个节点的全排列中，每一条路径被计算了  <strong>(n-1)*2</strong>  次。</p><p>2、用dp求出每两节点的距离和，而每两节点的距离之和就是所有路径之和。求在总路径和里每条边被计算了几次——&gt;<strong>son[a] * (n-son[a])</strong>次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,ll&gt;edge;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt;emm[maxn];</span><br><span class="line">ll dp[maxn];<span class="comment">//当前节点和她所有下层节点的路径和</span></span><br><span class="line">ll fac[maxn];<span class="comment">//记录阶乘</span></span><br><span class="line"><span class="keyword">int</span> son[maxn],n;<span class="comment">//去掉一条边后，分成两份节点，son指其中一份</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//计算(n-1)!</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;maxn; i++) fac[i] = fac[i<span class="number">-1</span>] * i % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> fa)</span><span class="comment">//rt是当前结点，fa是上一个结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    son[rt] = <span class="number">1</span>;<span class="comment">//初始化当前结点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:emm[rt])<span class="comment">//遍历容器中的每个值——&gt;遍历每个和当前结点相连的结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to = v.first;<span class="comment">//当前结点连通的结点</span></span><br><span class="line">        ll val = v.second;<span class="comment">//当前结点到连通结点的边的权值</span></span><br><span class="line">        <span class="keyword">if</span>(to == fa)<span class="comment">//如果当前结点连接的是上一个结点，就不再计算该节点——&gt;去重</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(to,rt);</span><br><span class="line">        son[rt] += son[to];<span class="comment">//求结点连通的结点和</span></span><br><span class="line">        ll tmp = <span class="number">1L</span>L * son[to] * (n - son[to]) % mod;<span class="comment">//当前边被计算了几次</span></span><br><span class="line">        dp[rt] = (dp[rt] + (dp[to] + tmp * val % mod) % mod) % mod;<span class="comment">//当前结点(包括它的子节点)贡献的路程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))  <span class="comment">//输入结点数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));<span class="comment">//初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(son,<span class="number">0</span>,<span class="keyword">sizeof</span>(son));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)</span><br><span class="line">            emm[i].clear();</span><br><span class="line">        <span class="keyword">int</span> u,v;<span class="comment">//u起点,v终点</span></span><br><span class="line">        ll val;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)<span class="comment">//记录给出路径</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;u,&amp;v,&amp;val);</span><br><span class="line">            emm[u].push_back(make_pair(v,val));</span><br><span class="line">            emm[v].push_back(make_pair(u,val));</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">1</span>]*fac[n<span class="number">-1</span>]%mod*<span class="number">2</span>%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1009-Tree-and-Permutation&quot;&gt;&lt;a href=&quot;#1009-Tree-and-Permutation&quot; class=&quot;headerlink&quot; title=&quot;1009 Tree and Permutation&quot;&gt;&lt;/a&gt;1009 Tree a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>poj 1328 Radar Installation</title>
    <link href="http://yoursite.com/2018/08/15/poj-1328-Radar-Installation/"/>
    <id>http://yoursite.com/2018/08/15/poj-1328-Radar-Installation/</id>
    <published>2018-08-15T11:11:28.000Z</published>
    <updated>2018-08-15T11:51:54.166Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.vjudge.net/contest/246672#problem/C" target="_blank" rel="noopener">原题</a></p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p><strong>x轴上方有n个小岛，现在x轴上建造雷达，每个雷达的辐射范围是d为半径的圆。求：为使所有小岛被辐射到，应当建造几个雷达。</strong></p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>情况：</p><p>1、要使小岛被辐射到，则小岛距离雷达距离小于等于雷达半径，</p><p>但通过雷达位置判断与小岛距离是难以实现的。</p><p>解决：</p><p>1、依次记录每个小岛可以被辐射到的雷达位置的范围并排序，若范围有交集则可以共同使用一雷达，若无交集则新建雷达。eg.   岛B左边界小于等于岛A右边界，则当前不需新建雷达，岛C左边界小于等于岛B但大于岛A边界，则当前应当新建一个雷达。</p><p>注意：岛与雷达距离计算公式：sqrt( (double) d <em> d - y </em> y);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> n,d;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">emm</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> r,l;</span><br><span class="line">&#125; isl[<span class="number">1001</span>];<span class="comment">//记录各岛可以被辐射的左右边界</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(emm a,emm b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.l&lt;b.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cc=<span class="number">1</span>;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;d==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;<span class="comment">//记录雷达个数,起始为一个雷达</span></span><br><span class="line">        <span class="keyword">bool</span> f=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span>(y&gt;d)f=<span class="literal">true</span>;<span class="comment">//岛到x轴垂直距离比d大时无解</span></span><br><span class="line">            <span class="keyword">else</span><span class="comment">//记录左右路径，注意double</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">double</span> len=<span class="built_in">sqrt</span>((<span class="keyword">double</span>)d*d-y*y);</span><br><span class="line">                isl[i].r=(<span class="keyword">double</span>)x+len;</span><br><span class="line">                isl[i].l=(<span class="keyword">double</span>)x-len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;cc++&lt;&lt;<span class="string">": -1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(isl, isl+n,cmp);<span class="comment">//对左边界排序</span></span><br><span class="line">        <span class="keyword">double</span> now=isl[<span class="number">0</span>].r;<span class="comment">//当前雷达辐射范围右边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)<span class="comment">//判断是否在辐射范围之内</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(isl[i].r&lt;now)now=isl[i].r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(now&lt;isl[i].l)</span><br><span class="line">            &#123;</span><br><span class="line">                now=isl[i].r;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;cc++&lt;&lt;<span class="string">": "</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cn.vjudge.net/contest/246672#problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>POJ 2965- The Pilots Brothers&#39; refrigerator</title>
    <link href="http://yoursite.com/2018/08/15/POJ-2965-The-Pilots-Brothers-refrigerator/"/>
    <id>http://yoursite.com/2018/08/15/POJ-2965-The-Pilots-Brothers-refrigerator/</id>
    <published>2018-08-15T05:27:28.000Z</published>
    <updated>2018-08-15T11:48:31.656Z</updated>
    
    <content type="html"><![CDATA[<p>##POJ 2965-The Pilots Brothers’ refrigerator</p><p><a href="https://cn.vjudge.net/contest/246672#problem/B" target="_blank" rel="noopener">原题</a></p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>题目中给出的状态图包括’+’,’-‘,要求将其全部翻转成’-‘，每次翻转一个位置,那么它所在的行和列都要翻转</p><p>问最小翻转次数,同时输出翻转路径。</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>这道题和POJ 1753相似，但这里借鉴到了更好的算法：</p><p>情况：</p><p>1、这道题不存在impossible的情况，说明最多把所有‘+’都改一次可以实现全部符号为‘-’。</p><p>2、这道题的关键在于如何改变‘+’，而不改变与它关联的行和列。</p><p>解决：</p><p>实现1：用一个二维数组初始化为0，’+‘的位置记为1，接下来依次改变’+‘的位置并用它记录矩阵各位置的改动次数，最后对2取模。/<em> 当某位置最后的改动次数为偶数，对2取模为0，说明该位置同初始情况相比没有改变，不需要改动 </em>/ 最后只需搜索数组中奇数的个数就是答案。</p><p>实现2：思路同上，具体操作改为用bool型数组记录改动次数，最后找到值为true的数量就是答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span> num[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">int</span> ii[<span class="number">17</span>],jj[<span class="number">17</span>];</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">           <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)<span class="comment">//找到'+'的情况进行改动</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[i][j]==<span class="string">'+'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[i][j]=!vis[i][j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">4</span>; k++)<span class="comment">//对关联行列改动</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        vis[i][k]=!vis[i][k];</span><br><span class="line">                        vis[k][j]=!vis[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)<span class="comment">//判断是否需要改动</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line">            <span class="keyword">if</span>(vis[i][j]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ii[ans]=i+<span class="number">1</span>;</span><br><span class="line">                jj[ans]=j+<span class="number">1</span>;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;ans; i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ii[i]&lt;&lt;<span class="string">' '</span>&lt;&lt;jj[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##POJ 2965-The Pilots Brothers’ refrigerator&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.vjudge.net/contest/246672#problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>POJ 1753 Flip Game(状压+搜索)</title>
    <link href="http://yoursite.com/2018/08/14/POJ-1753-Flip-Game-%E7%8A%B6%E5%8E%8B-%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2018/08/14/POJ-1753-Flip-Game-状压-搜索/</id>
    <published>2018-08-14T10:52:25.000Z</published>
    <updated>2018-08-15T11:56:48.649Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.vjudge.net/contest/246672#problem/A" target="_blank" rel="noopener">原题</a></p><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>题目中给出4*4的状态图包括’b’,’w’,要求全部翻转成’b’或’w’， 每次翻转一个位置,那么它的上下左右四个位置也要翻转(如果有的话)。要求算出最小翻转次数。</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>因为题目数据量不大，所以其实一维二维都可以。在这里将矩阵用一串二进制数表示，异或操作进行翻转，注意判断行列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">17</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pd</span><span class="params">()</span><span class="comment">//判断是否全部同向</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=<span class="number">16</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(num[i]!=num[i<span class="number">-1</span>])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fz</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//翻转操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[i]^=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">4</span>!=<span class="number">0</span>)num[i+<span class="number">1</span>]^=<span class="number">1</span>;<span class="comment">//不在最后一列</span></span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">4</span>!=<span class="number">1</span>)num[i<span class="number">-1</span>]^=<span class="number">1</span>;<span class="comment">//不在第一列</span></span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">4</span>)num[i<span class="number">-4</span>]^=<span class="number">1</span>;<span class="comment">//不在第一行</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">13</span>)num[i+<span class="number">4</span>]^=<span class="number">1</span>;<span class="comment">//不在最后一行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> j,<span class="keyword">int</span> now,<span class="keyword">int</span> all)</span><span class="comment">//枚举过程，j指到了第几个棋子，now指现在翻转的次数，all指这一轮应当翻转的总次数（1-16）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(now==all)<span class="comment">//翻转次数到这一轮最大值</span></span><br><span class="line">    &#123;</span><br><span class="line">        k=pd();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=j+<span class="number">1</span>; i&lt;=<span class="number">16</span>; i++)<span class="comment">//广搜本质</span></span><br><span class="line">    &#123;</span><br><span class="line">        fz(i);</span><br><span class="line">        bfs(i,now+<span class="number">1</span>,all);</span><br><span class="line">        <span class="keyword">if</span>(k) <span class="keyword">return</span>;</span><br><span class="line">        fz(i);<span class="comment">//还原。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'w'</span>)</span><br><span class="line">            num[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    k=pd();</span><br><span class="line">    <span class="keyword">if</span>(k)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( i=<span class="number">1</span>; i&lt;=<span class="number">16</span>; i++)<span class="comment">//一次遍历找出最小翻转次数</span></span><br><span class="line">        &#123;</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">            bfs(<span class="number">0</span>,<span class="number">0</span>,i);</span><br><span class="line">            <span class="keyword">if</span>(k)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k)<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cn.vjudge.net/contest/246672#problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>简述计算机启动过程</title>
    <link href="http://yoursite.com/2018/04/14/%E7%AE%80%E8%BF%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/14/简述计算机启动过程/</id>
    <published>2018-04-14T05:17:49.000Z</published>
    <updated>2018-04-15T05:45:18.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步：BIOS"><a href="#第一步：BIOS" class="headerlink" title="第一步：BIOS"></a>第一步：BIOS</h2><p>前提：“只读内存”ROM发明后，开机程序刷入ROM，该程序叫做“基本输入输出系统”简称BIOS</p><p><strong>1、计算机通电后首先读取ROM中的开机程序</strong></p><p>​    细节：电源刚开始供电时，电压还不稳定，主板控制芯片向CPU发出一个reset（重置）信号，让CPU初始化，稳定供电后，芯片撤去reset信号，CPU会自动的将其CS寄存器设定为0xFFFF，将其IP寄存器设定为0x0000。由于CS:IP指出了下一条指令的地址，因此CPU会跳到0xFFFF:0x0000处开始执行命令，而它只是存放一条跳转指令，跳转到BIOS可执行代码区。</p><p><strong>2、BIOS程序首先加电自检POST，就是查看计算机关键硬件能否满足运行的基本条件</strong></p><p>​    细节：因为POST检测过程在显卡初始化之前，如果发现错误是无法通过屏幕显示的，所以当POST自检中发现致命错误，是通过不同含义的声音（长短和次数）警告，然后启动终止。在正常情况下，POST过程进行得非常快，几乎无法感觉到它的存在，POST结束之后就会调用其它代码来进行更完整的硬件检测。</p><p><strong>3、接下来BIOS将查找其他设备的BIOS</strong></p><p>​    细节：首先查找显卡的BIOS，这时多数显卡会在屏幕上显示一些初始信息，如生产厂商、图形芯片类型等内容。接着查找完所有其他设备的BIOS 之后，系统BIOS 将显示出自己的启动画面，包括系统BIOS的类型、序列号和版本号等内容，同时屏幕底端左下角会出现主板信息代码，包含bios的日期、主板芯片组型号、主板的识别编码及厂商代码等。</p><p><strong>4、最后BIOS 进行其他检测</strong></p><p>​    细节：首先<em>检测cpu的类型和工作频率</em>，并将检测结果显示在屏幕上，然后系统BIOS开始<em>测试主机所有的内存容量</em>，并同时在屏幕上显示内存测试的数值，接下来开始<em>检测系统中安装的一些标准硬件设备</em>，这些设备包括硬盘、cd-rom、软驱等设备。标准设备检测完后，系统BIOS内部的支持即插即用的代码将开始<em>检测和配置系统中安装的即插即用设备</em>，每找到一个设备之后，系统bios都会在屏幕上显示出设备的名称和型号等信息，同时为该设备分配中断、dma通道和i／0端口等资源。</p><p>所有硬件检测配置完后，。</p><p>##第二步：</p><p>待续未完。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一步：BIOS&quot;&gt;&lt;a href=&quot;#第一步：BIOS&quot; class=&quot;headerlink&quot; title=&quot;第一步：BIOS&quot;&gt;&lt;/a&gt;第一步：BIOS&lt;/h2&gt;&lt;p&gt;前提：“只读内存”ROM发明后，开机程序刷入ROM，该程序叫做“基本输入输出系统”简称BIO
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux介绍及基于win10的Ubuntu安装</title>
    <link href="http://yoursite.com/2018/04/13/linux%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E4%BA%8Ewin10%E7%9A%84Ubuntu%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/04/13/linux介绍及基于win10的Ubuntu安装/</id>
    <published>2018-04-13T01:24:39.000Z</published>
    <updated>2018-04-15T12:34:24.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux入门知识"><a href="#linux入门知识" class="headerlink" title="linux入门知识"></a>linux入门知识</h1><p><img src="http://p73qqa15q.bkt.clouddn.com/2345_image_file_copy_1.jpg" alt=""></p><h2 id="一、linux-历史及特性"><a href="#一、linux-历史及特性" class="headerlink" title="一、linux 历史及特性"></a>一、linux 历史及特性</h2><p>​        linux是开放源代码的类Unix操作系统，诞生于1991年10月5日（第一次正式向外公布），由芬兰学生Linus Torvalds和后来陆续加入的众多爱好者共同开发完成。Linux是一个<strong>基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统</strong>。它能运行主要的Unix工具软件、应用程序和网络协议，可支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><ul><li><p><strong>UNIX</strong></p><pre><code>UNIX是一个功能强大、性能全面的多用户、多任务操作系统。linux是借鉴 unix的优点或说是核心程序等开发的更贴近现在需要的操作系统。且 unix 是针对服务器的，linux 除了针对服务器，也更侧重了大众使用的操作系统，是一种外观和性能与UNIX相同或更好的操作系统，但Linux不源于任何版本的UNIX的源代码，并不是UNIX，而是一个类似于UNIX的产品。</code></pre></li><li><p><strong>GNU</strong></p><pre><code>GNU是自由软件之父Richard Stallman在1984年组织开发的一个完全基于自由软件的软件体系，与此相应的有一分通用公共许可证（General Public License，简称GPL）。Linux以及与他有关的大量软件是在GPL的推动下开发和发布的。</code></pre></li><li><p><strong>BSD</strong></p><pre><code>UNIX、Linux、BSD 都是计算机的操作系统。无论BSD还是Linux，都是Unix的分支，Linux系统和BSD的诞生都是来源于Unix，而且BSD更早于Linux。FreeBSD源代码通常以宽松的BSD许可证发布。它与Linux有很多相似的地方，但它们在很多方面仍有不同。</code></pre></li><li><p><strong>minix</strong></p><pre><code>Minix是一种基于微内核架构的类Unix计算机操作系统，由Andrew S. Tanenbaum发明。Minix最初发布于1987年，开放全部源代码给大学教学和研究工作。2000年重新改为BSD授权，成为自由和开放源码软件，Linus Torvalds将MINIX作为平台和指导开发了MINIX的克隆---Linux，并且在1991年发布。</code></pre></li><li><p><strong>主要特性</strong></p></li></ul><ol><li>基本思想：系统中的所有都归结为一个文件，包括：命令、硬件和软件设备、操作系统、进程等等，对于操作系统内核而言，都被视为拥有各自特性或类型的文件。</li><li>完全免费：Linux是一款免费的操作系统，用户可以通过网络或其它途径免费获得，并可以任意修改其源代码。</li><li>完全兼容POSIX1.0标准：Linux下可以通过相应的模拟器运行常见的DOS、Windows的程序，这为用户从Windows转到Linux奠定了基础。</li><li>多用户，多任务：Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。多任务则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。</li><li>友好的界面：Linux同时具有字符界面和图形界面，在字符界面用户可以通过键盘输入相应的指令来进行操作。它同时也提供了类似Windows图形界面的X-Window系统，用户可以使用鼠标对其进行操作。</li><li>支持多平台：Linux可以运行在多种硬件平台上，如：具有x86、680x0、SPARC、Alpha等处理器的平台。此外Linux还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒或游戏机上。</li></ol><h2 id="二、常用linux版本介绍"><a href="#二、常用linux版本介绍" class="headerlink" title="二、常用linux版本介绍"></a>二、常用linux版本介绍</h2><ul><li><p><strong>Ubuntu</strong></p><p>​    Ubuntu是全球热门的Linux发行版，也是各种推荐入门Linux爱好者安装的一个Linux发行版。Ubuntu是基于Debian的unstable版本加强而来，Ubuntu就是一个拥有Debian所有的优点，以及自己所加强的优点的近乎完美的 Linux桌面系统。易于安装，硬件检测无可匹敌，界面非常友好，容易上手，是最适合做桌面系统的Linux发行版本。</p></li><li><p><strong>Linux Mint</strong></p><p>​    Linux Mint 基于Ubuntu 11.10，修复了大量Bug，更加稳定与简洁，是目前Distrowatch排行榜上第一名的Linux发行版。继承了Ubuntu的众多优点，同时也在Ubuntu的基础上加入很多自己优秀的特性。它提供浏览器插件、多媒体编解码器、对DVD播放的支持、Java和其他组件，与Ubuntu软件仓库完全兼容。</p></li><li><p><strong>Redhat</strong></p><p>​    Redhat是最成熟的一种Linux发行版，可以说是在国内使用人群最多 的Linux版本，Redhat系列的包管理方式采用的是基于RPM包的YUM包管理方式，包分发方式是编译好的二进制文件。稳定性方面RHEL和CentOS的稳定性非常好，适合于服务器使用。</p></li><li><p><strong>Debian</strong></p><p>​    Debian是社区类Linux的典范，几大基础发行版之一，Ubuntu就是基于Debian的。是迄今为止最遵循GNU规范 的Linux系统。默认不包含任何专有驱动，软件包通常选择比较稳定的版本而不是最新的版本，所以上面的软件包大部分都比较过时，但是 稳定和安全性都非常的高。</p></li></ul><p>除此之外，还有很多的linux版本，比如kali，Peppermint OS等等，各自都有自己的特长和用途，感兴趣可以自己查阅安装。</p><h2 id="三、linux-Ubuntu各版本的区别"><a href="#三、linux-Ubuntu各版本的区别" class="headerlink" title="三、linux Ubuntu各版本的区别"></a>三、linux Ubuntu各版本的区别</h2><p>前提：Ubuntu命名规则：前两位数字为发行时的年份年份的最后两位数字，后两位为发行的月份，中间以一个英文小数点隔开。</p><ul><li><strong>Ubuntu官方的各种版本特点：</strong></li></ul><p>　　1:<strong>Desktop版本</strong>：desktop是live cd的名字,什么是live cd?live cd是一个刻录在光盘上的操作系统，我们并不需要硬盘就可以直接在光盘上运行这个操作系统。里面也已经集成了很多软件，我们一般可以把这个系统安装到硬盘上，类似于ghost系统，安装速度会比较快。这个版本提供了向导的图形界面的方式，让你一步步来轻松地安装ubuntu(一般都安装这个系统的32位i386版本）. </p><p>　　2:<strong>Alternate版本</strong>：是一个最标准的安装版本，采用文本安装界面，里面有很多高级选项，可以安装desktop,也可以安装server版，适合比较高要求的人来安装，安装速度比desktop版慢，但是运行时的效率比desktop版本快。 </p><p>　　3:<strong>Netbook版本</strong>：专门为上网本定制和优化，最近的版本采用了Unity，为小屏幕提供了一种美观的用户界面，采用了大图标设计，让用户更容易寻找各种应用程序。 </p><p>　　5:<strong>DVD版本</strong>：里面包括Desktop和Alternate两种安裝模式，同时集成更多的软件和完整的语言包，假如你没有联网可以选择下这个版本。 </p><p>　　6:<strong>Minimal版本</strong>：安装ubuntu的最小镜像版本。 </p><ul><li><strong>Ubuntu各版本号整理</strong></li></ul><p>ps.收集信息纯属兴趣，<em>安装也不是最新版就好，稍旧一点点的版本教程会比较多，前人会帮你填上很多坑，目前来说16.04/16.10最合适。</em></p><p>1、Ubuntu 4.10 (Warty Warthog,长疣的疣猪)</p><p>Ubuntu 4.10 在 2004年10月发布,是 Ubuntu 的第一个版本,支持到 2006年04月。</p><p>2、Ubuntu 5.04 (Hoary Hedgehog,灰白的刺猬)</p><p>2005年04月发布,支持到 2006年10月。</p><p>3、Ubuntu 5.10 (Breezy Badger,活泼的獾子)</p><p>2005年10月发布,支持到 2007年04月。</p><p>4、Ubuntu 6.06LTS (Dapper Drake,帅气的公鸭)</p><p>Ubuntu 的第一个长期支持版本,发布于 2006年06月。长期支持版为桌面提供三年支持,服务器则是五年。普通版本则只支持 18 个月。更长的支持周期意味着更长的保障,让大规模部署 Ubuntu 更加可行。桌面支持到 2009年06月,服务器支持到 2011年06月。</p><p>5、Ubuntu 6.10(Edgy Eft,急躁的水蜥)</p><p>2006年10月发布。这个版本保证了启动过程的稳定和完整,支持到 2007年04月。</p><p>6、Ubuntu 7.04(Feisty Fawn,烦躁的小鹿)</p><p>2007年04月发布,重点改进了网络漫游模式,支持到 2008年10月。</p><p>7、Ubuntu 7.10(Gutsy Gibbon,胆大的长臂猿)</p><p>2007年10月发布,支持到 2009年04月。主要特性包括:默认支持绚丽的视觉效果,快速用户切换,打印机自动检测和更简单的桌面文件搜索和追踪。</p><p>8、Ubuntu 8.04LTS (Hardy Heron,坚强的苍鹭)</p><p>2008年04月发布,是 Ubuntu 的第二个长期支持版本。桌面支持到 2011年04月,服务器支持到 2013年04月。</p><p>9、Ubuntu 8.10(Intrepid Ibex,无畏的野山羊)</p><p>2008年10月发布,包括上百项改进和完整的 3G 支持。支持到 2010年04月。</p><p>10、Ubuntu 9.04(Jaunty Jackalope,得意洋洋的怀俄明野兔).</p><p>2009年04月发布。将云计算带到入 Ubuntu 社区。支持到 2010年10月。</p><p>11、Ubuntu 9.10(Karmic Koala,幸运的考拉)</p><p>2009年10月发布,支持到2011年04月。</p><p>12、Ubuntu 10.04(Lucid Lynx,清醒的猞猁)</p><p>计划于 2010年04月发布,是 Ubuntu 的第三个长期支持版,桌面支持到 2013年04月,服务器支持到 2015年04月。</p><p>13、Ubuntu 10.10( Maverick Meerkat,狐獴国度)</p><p>14、Ubuntu 11.04 (Natty Narwhal,聪慧的独角鲸）</p><p>15、Ubuntu 11.10 (Oneiric Ocelot，梦幻般的虎猫)</p><p>Oneiric 的含义是 “dreamy [梦想的]”, 与虎猫 ( Ocelot ) 相结合的用意是要时刻提醒我们，创新之道是：部分是幻想，部分是科学。我们需要紧跟在各条战线上的创新步伐，我们的桌面系统将变得更加新潮漂亮，并且在下一个发行版将变得更加完善，除了提供基于 OpenGL 的 Unity 界面外，还会用 <a href="http://wowubuntu.com/2d-unity.html" target="_blank" rel="noopener">2D 界面</a>给于相应的补充。同时， <a href="http://wowubuntu.com/ubuntu-qt.html" target="_blank" rel="noopener">QT 的引入</a>也意味着可以给用户及开发者更多的选择。</p><p>16、Ubuntu 12.04（Precise Pangolin，一丝不苟的穿山甲)</p><p>属于<strong>LTS</strong>版本,也就是长期支持版本,每2年发布一个长期支持版本,LTS 桌面版本可以得到3年的升级支持,而服务器版本可以得到5年支持。ubuntu 12.04 将于 2012 年 4 月发布。为何是Precise Pangolin Mark Shuttleworth解释道: “Ubuntu 12.04 是一款长期支持版本,所以我们对Ubuntu 12.04的期望就是它能够长久、稳定、硬如磐石、雷打不动。”</p><p>17、Ubuntu 12.10 (Quantal Quetzal）</p><p>。。。。。。太多了，我不找了。</p><h1 id="linux-Ubuntu安装教程"><a href="#linux-Ubuntu安装教程" class="headerlink" title="linux Ubuntu安装教程"></a>linux Ubuntu安装教程</h1><p>PS.这是通过制作U盘启动来安装Linux系统的具体操作方法</p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p>1.准备好U盘一个    //U盘最好8G以上，记得把U盘上的资料都存好:happy:</p><p>2.下载好Ubuntu16.10版系统镜像：<a href="http://releases.ubuntu.com/16.10/ubuntu-16.10-desktop-amd64.iso" target="_blank" rel="noopener">http://releases.ubuntu.com/16.10/ubuntu-16.10-desktop-amd64.iso</a></p><p>3.下载安装好UltralSO：<a href="https://www.baidu.com/link?url=U4pbu7q1bQF6kAzx_a6U9kYUljQy-I3KvarpyLHeuVZLurUApeJUjSmu8I91v_UMroSfhHta7KdpvcsPPxc0yWbTeheRIO31wGlgvCWQ_WS&amp;wd=&amp;eqid=a5bc849b0005efc4000000025acf4c2c" target="_blank" rel="noopener">https://www.baidu.com/link?url=U4pbu7q1bQF6kAzx_a6U9kYUljQy-I3KvarpyLHeuVZLurUApeJUjSmu8I91v_UMroSfhHta7KdpvcsPPxc0yWbTeheRIO31wGlgvCWQ_WS&amp;wd=&amp;eqid=a5bc849b0005efc4000000025acf4c2c</a></p><p>​    （1）.一路默认安装就可以//别装C 盘</p><p>​    （2）.运行时在欢迎界面选择“继续试用”即可</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523535282842.png" alt="1"></p><p>4.系统分区(进阶安装才需要，初学15G到50G左右都可以，当然更大也没问题）具体教程在这：<a href="https://www.disktool.cn/jiaocheng/how-to-partition-win10.html" target="_blank" rel="noopener">https://www.disktool.cn/jiaocheng/how-to-partition-win10.html</a></p><h2 id="二、制作U盘"><a href="#二、制作U盘" class="headerlink" title="二、制作U盘"></a>二、制作U盘</h2><p>1.U盘插入电脑，打开UltraSO</p><p>2.点击“文件”，点击“打开”，打开下载好Ubuntu系统镜像</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523535430902.png" alt="2"></p><p>3.点击“启动”，点击“写入硬盘镜像”，在弹出的界面选择“格式化”</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523535651839.png" alt="3"></p><p>4.在“格式化”窗口点击“开始”，结束后回到上图所示“写入硬盘镜像”界面，点击“写入”</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523535997087.png" alt="4"></p><p>完成后显示“刻录成功!“</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523536464466.png" alt="5"></p><h2 id="三、最简单的默认安装"><a href="#三、最简单的默认安装" class="headerlink" title="三、最简单的默认安装"></a>三、最简单的默认安装</h2><h3 id="1-首先要关闭电脑的Secure-Boot："><a href="#1-首先要关闭电脑的Secure-Boot：" class="headerlink" title="1.首先要关闭电脑的Secure Boot："></a>1.首先要关闭电脑的Secure Boot：</h3><p>​    1、在开机界面按住F2进入BIOS</p><p>​    2、选择”Boot”,选择”Secure Boot”，选择”Disabled”</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523537799560%20-%20%E5%89%AF%E6%9C%AC.png" alt="6"></p><p>​    3、按F10，选择”Yes”</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523537974629%20-%20%E5%89%AF%E6%9C%AC.png" alt="7"></p><h3 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2.开始安装"></a>2.开始安装</h3><p>在开机界面按F12   //不同电脑可能会有差别</p><p><img src="http://p73qqa15q.bkt.clouddn.com/20151217164336_39494.jpg" alt="8"></p><p>选择从U盘启动</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523538247344.png" alt="9"></p><p>选择”Install Ubuntu”!</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523538284505.png" alt="10"></p><p>接下来选择语言，然后在准备安装Ubuntu界面不进行勾选，直接选择“继续”</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523538461218.png" alt="11"></p><p>选择第一个安装类型，继续</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523549733907.png" alt="12"></p><p>选择磁盘后安装（如果Ubuntu和Windows安装在同一块硬盘内，则此时安装向导将要求你为Ubuntu划分一部分硬盘空间）</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523549867824.png" alt="13"></p><p>确认无误后继续</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523549924968.png" alt="14"></p><p>接下来时区选”shanghai”,如果语言选中文，键盘一般默认”chinese”，然后输入信息可以随意，但要记住密码</p><p><img src="http://p73qqa15q.bkt.clouddn.com/IMG_20180414_181035.jpg" alt=""></p><p><img src="http://p73qqa15q.bkt.clouddn.com/IMG_20180414_181043.jpg" alt=""></p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523550167506.png" alt="15"></p><p>下一步愉快的安装</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523550219109.png" alt="16"></p><p>最后重启电脑就可以看见选择系统的界面了</p><p><img src="http://p73qqa15q.bkt.clouddn.com/1523550308160.png" alt="17"></p><p>linux入坑第一步达成！</p><h2 id="四、进阶版安装"><a href="#四、进阶版安装" class="headerlink" title="四、进阶版安装"></a>四、进阶版安装</h2><p>从安装类型开始，选择”其他选项”</p><p><img src="http://p73qqa15q.bkt.clouddn.com/IMG_20180414_180546.jpg" alt="1"></p><p>然后在界面找到分区好的空白盘,首先分出根目录，点击下方”+”号，大小根据磁盘大小决定，”主分区”，”空间起始位置”，挂载点”/“</p><p><img src="http://p73qqa15q.bkt.clouddn.com/IMG_20180414_180817.jpg" alt=""></p><p>然后继续找到空白盘，设置Swap分区</p><p><img src="http://p73qqa15q.bkt.clouddn.com/IMG_20180414_180854.jpg" alt=""></p><p>接下来设置/home分区</p><p><img src="http://p73qqa15q.bkt.clouddn.com/IMG_20180414_180933.jpg" alt=""></p><p>最后设置/boot分区,挂载点”/boot”，类型位置用途与’’/home’’相同。</p><p>至于合理的硬盘分区，需要进一步学习：<a href="https://www.cnblogs.com/pangguoming/p/4584846.html" target="_blank" rel="noopener">https://www.cnblogs.com/pangguoming/p/4584846.html</a></p><p>接下来点击现在安装，后面的步骤相同，比较自由的Ubuntu进阶安装就完成啦。</p><p>学习参考借鉴来自：<a href="https://www.ithome.com/html/win10/303077.htm" target="_blank" rel="noopener">https://www.ithome.com/html/win10/303077.htm</a></p><p>​                <a href="https://blog.csdn.net/liang19890820/article/details/51868167#历史" target="_blank" rel="noopener">https://blog.csdn.net/liang19890820/article/details/51868167#历史</a></p><p>​                <a href="https://www.linuxidc.com/Linux/2016-08/133958.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2016-08/133958.htm</a></p><p>​                <a href="https://www.cnblogs.com/goolee/articles/6358019.html" target="_blank" rel="noopener">https://www.cnblogs.com/goolee/articles/6358019.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux入门知识&quot;&gt;&lt;a href=&quot;#linux入门知识&quot; class=&quot;headerlink&quot; title=&quot;linux入门知识&quot;&gt;&lt;/a&gt;linux入门知识&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://p73qqa15q.bkt.clouddn.com
      
    
    </summary>
    
    
  </entry>
  
</feed>
